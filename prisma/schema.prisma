// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String          @id @default(uuid())
  email        String          @unique
  password     String
  name         String
  role         Role            @relation(fields: [roleId], references: [id])
  roleId       String
  projects     ProjectMember[]
  tasks        Task[]          @relation("AssignedTasks")
  refreshToken String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  ProjectMember ProjectMember[] @relation("ProjectInviter")
}

model Role {
  id          String        @id @default(uuid())
  title       String        @unique
  permissions Permission[]  @relation("RolePermissions")
  users       User[]
}

model Permission {
  id          String   @id @default(uuid())
  title       String   @unique
  description String?
  roles       Role[]   @relation("RolePermissions")
}

model Project {
  id          String          @id @default(uuid())
  title       String
  description String?
  endTime     DateTime?  
  members     ProjectMember[]
  tasks       Task[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ProjectMember {
  id        String      @id @default(uuid())
  userId    String
  projectId String
  role      ProjectRole @default(MEMBER)
 
  joinedAt    DateTime?            
  invitedById String?                             
  status      MemberStatus   @default(ACTIVE)      
  lastActive  DateTime?                            
  notificationsEnabled Boolean @default(true)      
  favorite    Boolean        @default(false)       
 
  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id],onDelete: Cascade)
  invitedBy User? @relation("ProjectInviter", fields: [invitedById], references: [id])

  @@unique([userId,projectId])

}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  projectId   String?
  assigneeId  String?

  project  Project? @relation(fields: [projectId], references: [id]) 
  assignee User?   @relation("AssignedTasks", fields: [assigneeId], references: [id])
}

enum MemberStatus {
  ACTIVE
  INVITED
  REMOVED
  DECLINED
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}
enum TaskStatus {
  TODO
  IN_PROGRESS
  BLOCKED
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}
