generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  username      String          @unique
  email         String          @unique
  password      String
  refreshToken  String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  roleId        String
  role          Role            @relation(fields: [roleId], references: [id])

  ProjectMember ProjectMember[] @relation("ProjectInviter")
  projects      ProjectMember[]
  assignedTasks Task[]          @relation("TaskAssignees")
}

model Role {
  id          String       @id @default(uuid())
  title       String       @unique   // e.g. SUPER_ADMIN, COMPANY_ADMIN, STAFF, EXTERNAL_USER
  scope       RoleScope    @default(SYSTEM) 
  permissions Permission[] @relation("RolePermissions")
  users       User[]       
}

model Permission {
  id          String  @id @default(uuid())
  title       String  @unique       
  description String?
  roles       Role[]  @relation("RolePermissions")
}

model Project {
  id          String          @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  endTime     DateTime?
  members     ProjectMember[]
  tasks       Task[]
}

model ProjectMember {
  id                   String       @id @default(uuid())
  userId               String
  projectId            String
  role                 ProjectRole  @default(MEMBER) 
  favorite             Boolean      @default(false)
  invitedById          String?
  joinedAt             DateTime?
  lastActive           DateTime?
  notificationsEnabled Boolean      @default(true)
  status               MemberStatus @default(ACTIVE)

  invitedBy            User?        @relation("ProjectInviter", fields: [invitedById], references: [id])
  project              Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user                 User         @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  projectId   String?
  assignees   User[]       @relation("TaskAssignees")
  project     Project?     @relation(fields: [projectId], references: [id])

  @@unique([title, projectId])
}

enum RoleScope {
  SYSTEM
  PROJECT
}

enum MemberStatus {
  ACTIVE
  INVITED
  REMOVED
  DECLINED
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  BLOCKED
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}
